h1. Fudge - Rails/Git based CI server and build tool.

Fudge is a Rails/Git based CI server and build tool.

h2. Features

* Defining build processs and success criteria based on a FudgeFile.
* Abiility to run the build process through 'fudge build' command.

h3. Coming Features

* Ability to define different builds and run them specificly.
* Run a CI server for a project, which picks up git changes and runs a build.
* Automatic building of new branches in Git.
* Specifying builds for specific branches, and build them based on the current branch.

h2. Installation

Add to your project's Gemfile:

<ruby>
  gem 'fudge', :git => 'git@github.com:Sage/fudge.git'
</ruby>

Run in your project root:

<shell>
  bundle install
</shell>

h2. Usage

To create a blank Fudgefile, run in your project root:

<shell>
  bundle exec fudge init
</shell>

To run the default build:

<shell>
  bundle exec fudge build
</shell>

h2. Fudgefile syntax

To define a build with a given name:

<ruby>
  build :some_name do |b|
  end
</ruby>

To define some tasks on that build:

<ruby>
  build :some_name do |b|
    b.task :rspec
  end
</ruby>

Any options passed to the task method will be passed to the task's initializer.

h3. Composite Tasks

Some tasks are composite tasks, and can have tasks added to themselves, for example the each_directory task:

<ruby>
  build :some_name do |b|
    b.task :each_directory, '*' do |t|
      t.task :rspec
    end
  end
</ruby>

h2. Defining tasks

A task is a class that responds to two methods:

@self.name@ => A class method that returns a symbol representing the task. This is what will be used to identify your task in the Fudgefile.
@run@ => An instance method which carries out the contents of the task. Should return @true@ or @false@ depending on whether the task succeeded.

For example, here is a simple task which will print some output and always pass:

<ruby>
  class LoudTask
    def self.name
      :loud
    end

    def run
      puts "I WAS RUN"
      true
    end
  end
</ruby>

h3. Registering your task

To make your task available to Fudge, you simply register it in the @TaskRegistry@:

<ruby>
  require 'fudge'
  Fudge::FudgeFile::TaskRegistry.register(LoudTask)
</ruby>

This will make the @LoudTask@ task available in your Fudgefile's like so:

<ruby>
  build :some_name do |b|
    b.task :loud
  end
</ruby>
